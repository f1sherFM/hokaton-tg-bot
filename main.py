import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext
)
from database import Database
import requests
import json
from config import TELEGRAM_TOKEN, MISTRAL_API_KEY, MISTRAL_API_URL

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    await update.message.reply_text(
        f"üèÜ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø - –±–æ—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –°—É—Ä–≥—É—Ç–∞.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Å–µ–∫—Ü–∏–∏ –≤ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/facilities - –ø–æ–∏—Å–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n"
        "/sections - –ø–æ–∏—Å–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π\n"
        "/ask - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Å–ø–æ—Ä—Ç–µ –≤ –°—É—Ä–≥—É—Ç–µ\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/facilities - –ø–æ–∏—Å–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n"
        "/sections - –ø–æ–∏—Å–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π\n"
        "/ask - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Å–ø–æ—Ä—Ç–µ –≤ –°—É—Ä–≥—É—Ç–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é!"
    )

async def facilities_command(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [
            InlineKeyboardButton("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã", callback_data='facility_all'),
            InlineKeyboardButton("–°—Ç–∞–¥–∏–æ–Ω—ã", callback_data='facility_stadium'),
        ],
        [
            InlineKeyboardButton("–ë–∞—Å—Å–µ–π–Ω—ã", callback_data='facility_pool'),
            InlineKeyboardButton("–°–∫–µ–π—Ç-–ø–∞—Ä–∫–∏", callback_data='facility_skatepark'),
        ],
        [
            InlineKeyboardButton("–°–∫–∞–ª–æ–¥—Ä–æ–º—ã", callback_data='facility_climbing'),
            InlineKeyboardButton("–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–µ –∑–∞–ª—ã", callback_data='facility_gym'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('üèü –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:', reply_markup=reply_markup)

async def sections_command(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [
            InlineKeyboardButton("–í—Å–µ —Å–µ–∫—Ü–∏–∏", callback_data='section_all'),
            InlineKeyboardButton("–î–ª—è –¥–µ—Ç–µ–π", callback_data='section_children'),
        ],
        [
            InlineKeyboardButton("–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö", callback_data='section_adults'),
            InlineKeyboardButton("–§—É—Ç–±–æ–ª", callback_data='sport_football'),
        ],
        [
            InlineKeyboardButton("–•–æ–∫–∫–µ–π", callback_data='sport_hockey'),
            InlineKeyboardButton("–ü–ª–∞–≤–∞–Ω–∏–µ", callback_data='sport_swimming'),
        ],
        [
            InlineKeyboardButton("–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data='sport_martial'),
            InlineKeyboardButton("–ô–æ–≥–∞", callback_data='sport_yoga'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('üèÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π:', reply_markup=reply_markup)

async def ask_question(update: Update, context: CallbackContext) -> None:
    question = ' '.join(context.args)
    if not question:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return
    
    await update.message.reply_text("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    try:
        headers = {
            "Authorization": f"Bearer {MISTRAL_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "mistral-tiny",
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≥–æ—Ä–æ–¥–∞ –°—É—Ä–≥—É—Ç. "
                               "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ —Å–ø–æ—Ä—Ç–∞ –≤ –°—É—Ä–≥—É—Ç–µ."
                },
                {
                    "role": "user",
                    "content": question
                }
            ]
        }
        
        response = requests.post(MISTRAL_API_URL, headers=headers, json=data)
        response.raise_for_status()
        answer = response.json()['choices'][0]['message']['content']
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Mistral API: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('_')
    
    if data[0] == 'facility':
        await handle_facility_query(query, data[1])
    elif data[0] == 'section' or data[0] == 'sport':
        await handle_section_query(query, data)

async def handle_facility_query(query, facility_type):
    type_names = {
        'all': '–≤—Å–µ',
        'stadium': '—Å—Ç–∞–¥–∏–æ–Ω',
        'pool': '–±–∞—Å—Å–µ–π–Ω',
        'skatepark': '—Å–∫–µ–π—Ç-–ø–∞—Ä–∫',
        'climbing': '—Å–∫–∞–ª–æ–¥—Ä–æ–º',
        'gym': '—Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª'
    }
    
    facilities = db.get_facilities(type_names[facility_type] if facility_type != 'all' else None)
    
    if not facilities:
        await query.edit_message_text(text="‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞.")
        return
    
    message = f"üèü <b>–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ({type_names[facility_type]}):</b>\n\n"
    for facility in facilities:
        message += (
            f"<b>{facility['name']}</b> ({facility['type']})\n"
            f"üìç –ê–¥—Ä–µ—Å: {facility['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {facility['phone'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        )
    
    await query.edit_message_text(text=message, parse_mode='HTML')

async def handle_section_query(query, data):
    if data[0] == 'section':
        age_group = None
        if data[1] == 'children':
            age_group = '–¥–µ—Ç–∏'
        elif data[1] == 'adults':
            age_group = '–≤–∑—Ä–æ—Å–ª—ã–µ'
        
        sections = db.get_sections(age_group=age_group)
        title = f"–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ ({'–¥–ª—è ' + age_group if age_group else '–≤—Å–µ'}):"
    else:
        sport_type = {
            'football': '—Ñ—É—Ç–±–æ–ª',
            'hockey': '—Ö–æ–∫–∫–µ–π',
            'swimming': '–ø–ª–∞–≤–∞–Ω–∏–µ',
            'martial': '–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞',
            'yoga': '–π–æ–≥–∞'
        }[data[1]]
        
        sections = db.get_sections(sport_type=sport_type)
        title = f"–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ ({sport_type}):"
    
    if not sections:
        await query.edit_message_text(text="‚ùå –ù–µ—Ç —Å–µ–∫—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
        return
    
    message = f"üèÖ <b>{title}</b>\n\n"
    for section in sections:
        message += (
            f"<b>{section['sport_type'].capitalize()}</b> ({section['age_group']})\n"
            f"üè¢ {section['facility_name']}\n"
            f"üìç {section['address']}\n"
            f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {section['schedule']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {section['price'] or '–±–µ—Å–ø–ª–∞—Ç–Ω–æ'}\n\n"
        )
    
    await query.edit_message_text(text=message, parse_mode='HTML')

def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("facilities", facilities_command))
    application.add_handler(CommandHandler("sections", sections_command))
    application.add_handler(CommandHandler("ask", ask_question))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()