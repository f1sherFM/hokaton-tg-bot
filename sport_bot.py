import os
import logging
import asyncio
from typing import Optional, List, Dict, Any
import psycopg2
from psycopg2 import sql, extras
import requests
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB_NAME = "sport_bot_db"
    DB_USER = "postgres"
    DB_PASSWORD = "root"
    DB_HOST = "localhost"
    DB_PORT = "5432"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
    TELEGRAM_TOKEN = "5354843188:AAGw7HfazJXuxlruAMTYesFCHljTBahfHgk"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Mistral AI
    MISTRAL_API_KEY = "nG2ac1xdGlnSHW2U7IEee6HADxcPf7fY"
    MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"
    MISTRAL_MODEL = "mistral-small"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω–µ–π
    XP_PER_VISIT = 10
    LEVEL_UP_XP_FACTOR = 100

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
bot = Bot(
    token=Config.TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserStates(StatesGroup):
    waiting_for_sport_type = State()
    waiting_for_age_group = State()
    waiting_for_location = State()
    waiting_for_feedback = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self):
        self.conn = None
        
    async def connect(self):
        try:
            self.conn = psycopg2.connect(
                dbname=Config.DB_NAME,
                user=Config.DB_USER,
                password=Config.DB_PASSWORD,
                host=Config.DB_HOST,
                port=Config.DB_PORT
            )
            logger.info("Successfully connected to PostgreSQL database")
        except Exception as e:
            logger.error(f"Error connecting to PostgreSQL: {e}")
            raise
            
    async def close(self):
        if self.conn:
            self.conn.close()
            logger.info("Closed database connection")
            
    async def execute_query(self, query: str, params: tuple = None, fetch: bool = False):
        try:
            with self.conn.cursor(cursor_factory=extras.DictCursor) as cur:
                cur.execute(query, params or ())
                if fetch:
                    return cur.fetchall()
                self.conn.commit()
        except Exception as e:
            logger.error(f"Database error: {e}")
            self.conn.rollback()
            raise
            
    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        queries = [
            """
            CREATE TABLE IF NOT EXISTS sports_facilities (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                type VARCHAR(100) NOT NULL,
                address TEXT NOT NULL,
                sports TEXT[] NOT NULL,
                age_groups VARCHAR(100)[] NOT NULL,
                schedule JSONB,
                contacts VARCHAR(255),
                coordinates POINT,
                description TEXT
            )
            """,
            """
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username VARCHAR(100),
                first_name VARCHAR(100),
                last_name VARCHAR(100),
                registration_date TIMESTAMP DEFAULT NOW(),
                current_level INTEGER DEFAULT 1,
                experience_points INTEGER DEFAULT 0,
                last_activity_date DATE,
                preferences TEXT[]
            )
            """,
            """
            CREATE TABLE IF NOT EXISTS user_visits (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id),
                facility_id INTEGER REFERENCES sports_facilities(id),
                visit_date TIMESTAMP DEFAULT NOW(),
                activity_type VARCHAR(100),
                rating INTEGER
            )
            """,
            """
            CREATE TABLE IF NOT EXISTS achievements (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id),
                achievement_name VARCHAR(255) NOT NULL,
                achievement_date TIMESTAMP DEFAULT NOW(),
                badge_url VARCHAR(255),
                description TEXT
            )
            """,
            """
            CREATE TABLE IF NOT EXISTS sport_events (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                event_date TIMESTAMP NOT NULL,
                location VARCHAR(255),
                organizer VARCHAR(255),
                age_restriction VARCHAR(100),
                registration_url VARCHAR(255)
            )
            """
        ]
        
        try:
            for query in queries:
                await self.execute_query(query)
            logger.info("Database tables initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing database: {e}")
            raise

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mistral AI
class MistralAI:
    @staticmethod
    async def generate_response(prompt: str, context: str = None) -> str:
        headers = {
            "Authorization": f"Bearer {Config.MISTRAL_API_KEY}",
            "Content-Type": "application/json"
        }
        
        messages = []
        if context:
            messages.append({"role": "system", "content": context})
        messages.append({"role": "user", "content": prompt})
        
        data = {
            "model": Config.MISTRAL_MODEL,
            "messages": messages,
            "temperature": 0.4,
            "max_tokens": 4096
        }
        
        try:
            response = requests.post(Config.MISTRAL_API_URL, headers=headers, json=data, timeout=10)
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
        except requests.exceptions.RequestException as e:
            logger.error(f"Mistral API request failed: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"Error processing Mistral response: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
mistral = MistralAI()

# ======================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ======================

@router.message(Command("start"))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    await db.execute_query(
        """
        INSERT INTO users (user_id, username, first_name, last_name)
        VALUES (%s, %s, %s, %s)
        ON CONFLICT (user_id) DO NOTHING
        """,
        (user.id, user.username, user.first_name, user.last_name)
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞. "
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name or '–¥—Ä—É–≥'}. "
        f"–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ –°—É—Ä–≥—É—Ç–µ, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö. "
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –∏ –≤–∫–ª—é—á–∞—Ç—å —ç–º–æ–¥–∑–∏."
    )
    
    greeting = await mistral.generate_response(prompt)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer(
        f"{greeting}\n\n"
        "üèÜ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –°—É—Ä–≥—É—Ç–µ!\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üîç /find - –ù–∞–π—Ç–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã\n"
        "üìä /stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É—Ä–æ–≤–µ–Ω—å\n"
        "üèÖ /achievements - –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "üéØ /recommend - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "üèÅ /events - –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."
    )

@router.message(Command("help"))
async def send_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üîç /find - –ü–æ–∏—Å–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
        "üìä /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É—Ä–æ–≤–µ–Ω—å\n"
        "üèÖ /achievements - –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "üéØ /recommend - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "üèÅ /events - –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
        "‚Ä¢ –ì–¥–µ –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è –ø–ª–∞–≤–∞–Ω–∏–µ–º –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –µ—Å—Ç—å —Å–µ–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–µ–π 10 –ª–µ—Ç?\n"
        "‚Ä¢ –ü–æ—Å–æ–≤–µ—Ç—É–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±—É–¥—É—Ç –≤ —ç—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ?\n\n"
        "–ß–µ–º —á–∞—â–µ –≤—ã –ø–æ—Å–µ—â–∞–µ—Ç–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Ç–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!"
    )
    await message.answer(help_text)

@router.message(Command("find"))
async def find_sports_facilities(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–§—É—Ç–±–æ–ª"), KeyboardButton(text="–•–æ–∫–∫–µ–π")],
            [KeyboardButton(text="–ü–ª–∞–≤–∞–Ω–∏–µ"), KeyboardButton(text="–ô–æ–≥–∞")],
            [KeyboardButton(text="–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª"), KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await state.set_state(UserStates.waiting_for_sport_type)
    await message.answer(
        "‚öΩ <b>–ö–∞–∫–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>",
        reply_markup=keyboard
    )

@router.message(StateFilter(UserStates.waiting_for_sport_type))
async def process_sport_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
    sport_type = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
    await state.update_data(sport_type=sport_type)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–µ—Ç–∏ (–¥–æ 12)"), KeyboardButton(text="–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ (13-17)")],
            [KeyboardButton(text="–í–∑—Ä–æ—Å–ª—ã–µ (18+)"), KeyboardButton(text="–í—Å–µ –≤–æ–∑—Ä–∞—Å—Ç—ã")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await state.set_state(UserStates.waiting_for_age_group)
    await message.answer(
        "üë∂ <b>–î–ª—è –∫–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏—â–µ–º –∑–∞–Ω—è—Ç–∏—è?</b>",
        reply_markup=keyboard
    )

@router.message(StateFilter(UserStates.waiting_for_age_group))
async def process_age_group(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    sport_type = user_data.get('sport_type')
    age_group = message.text
    
    logger.info(f"Searching for: sport={sport_type}, age={age_group}")  # –õ–æ–≥–∏—Ä—É–µ–º
    
    facilities = await db.execute_query(
        """SELECT name, sports, age_groups 
           FROM sports_facilities 
           WHERE %s = ANY(sports) AND %s = ANY(age_groups)""",
        (sport_type, age_group),
        fetch=True
    )
    
    logger.info(f"Found {len(facilities)} facilities")  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    if not facilities:
        await message.answer(
            "üòï <b>–ù–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.</b>\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /recommend –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
        )
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = ["<b>üèü –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:</b>\n\n"]
    for idx, facility in enumerate(facilities, 1):
        response.append(
            f"<b>{idx}. {facility['name']} ({facility['type']})</b>\n"
            f"üìç –ê–¥—Ä–µ—Å: {facility['address']}\n"
            f"üè∑ –í–∏–¥—ã —Å–ø–æ—Ä—Ç–∞: {', '.join(facility['sports'])}\n"
            f"üë• –í–æ–∑—Ä–∞—Å—Ç: {', '.join(facility['age_groups'])}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {facility['contacts'] or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        )
        if facility['description']:
            response.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {facility['description']}\n")
        response.append("\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ
    response.append(
        "–ü–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /visit [–Ω–æ–º–µ—Ä], "
        "—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç –∏ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å!"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(search_results=facilities)
    await state.clear()
    
    await message.answer("".join(response))

@router.message(Command("visit"))
async def log_visit(message: types.Message, state: FSMContext):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã (/visit 1)
        args = message.text.split()
        if len(args) < 2:
            raise ValueError
        facility_num = int(args[1])
    except (ValueError, IndexError):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>/visit 1</code> - —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    user_data = await state.get_data()
    facilities = user_data.get('search_results', [])
    
    if not facilities or facility_num < 1 or facility_num > len(facilities):
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å–Ω–æ–≤–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä."
        )
        return
    
    facility = facilities[facility_num - 1]
    user_id = message.from_user.id
    sport_type = facility['sports'][0] if facility['sports'] else 'unknown'
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏
        await db.execute_query(
            """
            INSERT INTO user_visits (user_id, facility_id, activity_type)
            VALUES (%s, %s, %s)
            """,
            (user_id, facility['id'], sport_type)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute_query(
            """
            UPDATE users 
            SET experience_points = experience_points + %s,
                last_activity_date = CURRENT_DATE
            WHERE user_id = %s
            """,
            (Config.XP_PER_VISIT, user_id)
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        user_data = await db.execute_query(
            """
            SELECT current_level, experience_points FROM users 
            WHERE user_id = %s
            """,
            (user_id,),
            fetch=True
        )
        
        if user_data:
            current_level = user_data[0]['current_level']
            current_xp = user_data[0]['experience_points']
            xp_needed = current_level * Config.LEVEL_UP_XP_FACTOR
            
            if current_xp >= xp_needed:
                new_level = current_level + 1
                await db.execute_query(
                    """
                    UPDATE users 
                    SET current_level = %s
                    WHERE user_id = %s
                    """,
                    (new_level, user_id)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
                await message.answer(
                    f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!</b>\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if new_level == 3:
                    await grant_achievement(user_id, "–ù–æ–≤–∏—á–æ–∫", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º 3 —É—Ä–æ–≤–Ω—è!")
                elif new_level == 5:
                    await grant_achievement(user_id, "–õ—é–±–∏—Ç–µ–ª—å", "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 5 —É—Ä–æ–≤–Ω—è! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")
                elif new_level == 10:
                    await grant_achievement(user_id, "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", "10 —É—Ä–æ–≤–µ–Ω—å - –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        
        await message.answer(
            f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –ø–æ—Å–µ—â–µ–Ω–∏–µ {facility['name']}.</b>\n"
            f"+{Config.XP_PER_VISIT} –æ–ø—ã—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /stats"
        )
    except Exception as e:
        logger.error(f"Error logging visit: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ—Å–µ—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def grant_achievement(user_id: int, name: str, description: str):
    """–í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        existing = await db.execute_query(
            """
            SELECT id FROM achievements 
            WHERE user_id = %s AND achievement_name = %s
            """,
            (user_id, name),
            fetch=True
        )
        
        if not existing:
            await db.execute_query(
                """
                INSERT INTO achievements (user_id, achievement_name, description)
                VALUES (%s, %s, %s)
                """,
                (user_id, name, description)
            )
            
            await bot.send_message(
                user_id,
                f"üèÜ <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {name}!</b>\n"
                f"{description}\n\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: /achievements"
            )
    except Exception as e:
        logger.error(f"Error granting achievement: {e}")

@router.message(Command("stats"))
async def show_user_stats(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    try:
        user_data = await db.execute_query(
            """
            SELECT u.current_level, u.experience_points, u.registration_date, 
                   COUNT(v.id) as visits_count, 
                   STRING_AGG(DISTINCT v.activity_type, ', ') as activities
            FROM users u
            LEFT JOIN user_visits v ON u.user_id = v.user_id
            WHERE u.user_id = %s
            GROUP BY u.user_id
            """,
            (user_id,),
            fetch=True
        )
        
        if not user_data:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start")
            return
        
        user = user_data[0]
        level = user['current_level']
        xp = user['experience_points']
        visits = user['visits_count'] or 0
        activities = user['activities'] or "–ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        reg_date = user['registration_date'].strftime("%d.%m.%Y")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        xp_needed = level * Config.LEVEL_UP_XP_FACTOR
        progress_percent = min(int(xp / xp_needed * 100), 100)
        progress_bar = "üü©" * int(progress_percent / 10) + "‚¨ú" * (10 - int(progress_percent / 10))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. "
            f"–£—Ä–æ–≤–µ–Ω—å: {level}, –æ–ø—ã—Ç: {xp}, –ø–æ—Å–µ—â–µ–Ω–∏–π: {visits}. "
            f"–û—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activities}. "
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}. "
            "–ù–∞–ø–∏—à–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–º–µ—á–∞—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "
            "–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–æ—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."
        )
        
        ai_response = await mistral.generate_response(prompt)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"<b>üìä –í–∞—à–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"‚≠ê <b>–û–ø—ã—Ç:</b> {xp}/{xp_needed}\n"
            f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress_bar} {progress_percent}%\n"
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è <b>–í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π:</b> {visits}\n"
            f"‚öΩ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {activities}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}\n\n"
            f"{ai_response}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ö–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º –æ–ø—ã—Ç."
        )
        
        await message.answer(response)
    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(Command("achievements"))
async def show_achievements(message: types.Message):
    """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    try:
        achievements = await db.execute_query(
            """
            SELECT achievement_name, description, achievement_date 
            FROM achievements 
            WHERE user_id = %s
            ORDER BY achievement_date DESC
            """,
            (user_id,),
            fetch=True
        )
        
        if not achievements:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. üèÜ\n"
                "–ü–æ—Å–µ—â–∞–π—Ç–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, –ø–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
            )
            return
        
        response = ["<b>üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"]
        for ach in achievements:
            date_str = ach['achievement_date'].strftime("%d.%m.%Y")
            response.append(
                f"‚Ä¢ <b>{ach['achievement_name']}</b> ({date_str})\n"
                f"   {ach['description']}\n\n"
            )
        
        await message.answer("".join(response))
    except Exception as e:
        logger.error(f"Error showing achievements: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(Command("recommend"))
async def recommend_activities(message: types.Message):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await db.execute_query(
            """
            SELECT u.current_level, u.experience_points, 
                   STRING_AGG(DISTINCT v.activity_type, ', ') as activities
            FROM users u
            LEFT JOIN user_visits v ON u.user_id = v.user_id
            WHERE u.user_id = %s
            GROUP BY u.user_id
            """,
            (user_id,),
            fetch=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        facilities = await db.execute_query(
            """
            SELECT name, type, sports, age_groups, description 
            FROM sports_facilities 
            ORDER BY RANDOM() LIMIT 5
            """,
            fetch=True
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context = (
            "–¢—ã - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –°—É—Ä–≥—É—Ç–∞. "
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. "
            f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data[0]['current_level'] if user_data else 1}\n"
            f"–ï–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data[0]['activities'] if user_data and user_data[0]['activities'] else '–ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n"
        )
        
        for fac in facilities:
            context += (
                f"- {fac['name']} ({fac['type']}): {', '.join(fac['sports'])}, "
                f"–≤–æ–∑—Ä–∞—Å—Ç: {', '.join(fac['age_groups'])}\n"
                f"  –û–ø–∏—Å–∞–Ω–∏–µ: {fac['description']}\n"
            )
        
        context += (
            "\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 2-3 –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "–Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, "
            "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI
        recommendations = await mistral.generate_response(
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            context
        )
        
        await message.answer(
            f"üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:</b>\n\n"
            f"{recommendations}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞? –ù–∞–ø–∏—à–∏—Ç–µ /find"
        )
    except Exception as e:
        logger.error(f"Error generating recommendations: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(Command("events"))
async def show_upcoming_events(message: types.Message):
    """–ü–æ–∫–∞–∑ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    try:
        events = await db.execute_query(
            """
            SELECT title, description, event_date, location 
            FROM sport_events 
            WHERE event_date >= NOW() 
            ORDER BY event_date 
            LIMIT 5
            """,
            fetch=True
        )
        
        if not events:
            await message.answer(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. üóì\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /find"
            )
            return
        
        response = ["<b>üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"]
        for event in events:
            date_str = event['event_date'].strftime("%d.%m.%Y –≤ %H:%M")
            response.append(
                f"‚Ä¢ <b>{event['title']}</b>\n"
                f"  üïí {date_str}\n"
                f"  üìç {event['location']}\n"
                f"  ‚ÑπÔ∏è {event['description']}\n\n"
            )
        
        await message.answer("".join(response))
    except Exception as e:
        logger.error(f"Error showing events: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message()
async def handle_free_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_query = message.text
    
    if len(user_query) < 5:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥:\n"
            "/find - –ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤\n"
            "/events - –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
            "/recommend - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = await db.execute_query(
            """
            SELECT current_level, experience_points 
            FROM users 
            WHERE user_id = %s
            """,
            (message.from_user.id,),
            fetch=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
        facilities = await db.execute_query(
            """
            SELECT name, type, sports, age_groups, address 
            FROM sports_facilities 
            ORDER BY RANDOM() 
            LIMIT 5
            """,
            fetch=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
        events = await db.execute_query(
            """
            SELECT title, description, event_date 
            FROM sport_events 
            WHERE event_date >= NOW() 
            ORDER BY event_date 
            LIMIT 3
            """,
            fetch=True
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context = (
            "–¢—ã - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –°—É—Ä–≥—É—Ç–∞. "
            "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ø–æ—Ä—Ç–æ–º. "
            f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data[0]['current_level'] if user_data else 1}\n\n"
            "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n"
        )
        
        for fac in facilities:
            context += (
                f"- {fac['name']} ({fac['type']}): {', '.join(fac['sports'])}, "
                f"–∞–¥—Ä–µ—Å: {fac['address']}\n"
            )
        
        context += "\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
        for event in events:
            date_str = event['event_date'].strftime("%d.%m.%Y")
            context += f"- {event['title']} ({date_str}): {event['description']}\n"
        
        context += (
            "\n–ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º, –∫—Ä–∞—Ç–∫–∏–º (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –∏ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. "
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, —á—Ç–æ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = await mistral.generate_response(user_query, context)
        await message.answer(response)
    except Exception as e:
        logger.error(f"Error processing free text: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# ======================
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ======================

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await db.connect()
    await db.init_db()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await seed_test_data()
    
    logger.info("Bot started")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    await db.close()
    logger.info("Bot stopped")

async def seed_test_data():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        existing = await db.execute_query(
            "SELECT COUNT(*) FROM sports_facilities",
            fetch=True
        )
        
        if existing and existing[0][0] == 0:
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            test_facilities = [
                {
                    "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å '–û–ª–∏–º–ø'",
                    "type": "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å",
                    "address": "—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 15",
                    "sports": ["–ø–ª–∞–≤–∞–Ω–∏–µ", "—Ñ—É—Ç–±–æ–ª", "–±–∞—Å–∫–µ—Ç–±–æ–ª"],
                    "age_groups": ["–¥–µ—Ç–∏", "–ø–æ–¥—Ä–æ—Å—Ç–∫–∏", "–≤–∑—Ä–æ—Å–ª—ã–µ"],
                    "contacts": "+7 (3462) 123-456",
                    "description": "–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞ —Å –±–∞—Å—Å–µ–π–Ω–æ–º –∏ –∑–∞–ª–∞–º–∏"
                },
                # ... –¥—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã ...
            ]
            
            for fac in test_facilities:
                await db.execute_query(
                    """
                    INSERT INTO sports_facilities 
                    (name, type, address, sports, age_groups, contacts, description)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """,
                    (
                        fac["name"], fac["type"], fac["address"],
                        fac["sports"], fac["age_groups"],
                        fac["contacts"], fac["description"]
                    )
                )
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            test_events = [
                {
                    "title": "–û—Ç–∫—Ä—ã—Ç—ã–π —Ç—É—Ä–Ω–∏—Ä –ø–æ –ø–ª–∞–≤–∞–Ω–∏—é",
                    "description": "–ï–∂–µ–≥–æ–¥–Ω—ã–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Ç—É—Ä–Ω–∏—Ä –ø–æ –ø–ª–∞–≤–∞–Ω–∏—é —Å—Ä–µ–¥–∏ –ª—é–±–∏—Ç–µ–ª–µ–π",
                    "event_date": "2023-12-15 10:00:00",
                    "location": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å '–û–ª–∏–º–ø', –±–∞—Å—Å–µ–π–Ω"
                },
            ]
            
            for event in test_events:
                await db.execute_query(
                    """
                    INSERT INTO sport_events 
                    (title, description, event_date, location)
                    VALUES (%s, %s, %s, %s)
                    """,
                    (
                        event["title"], event["description"],
                        event["event_date"], event["location"]
                    )
                )
            
            logger.info("Test data seeded successfully")
    except Exception as e:
        logger.error(f"Error seeding test data: {e}")

async def main():
    await on_startup()
    
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
    


#nG2ac1xdGlnSHW2U7IEee6HADxcPf7fY -> api mistral
#5354843188:AAGw7HfazJXuxlruAMTYesFCHljTBahfHgk -> tg bot api